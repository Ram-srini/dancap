#include <iostream>
#include "sgx_urts.h"
#include "Enclave_u.h"
#include "sgx_uae_quote_ex.h"
#include "handle_sgx_error.h"

#define ENCLAVE_NAME "enclave.signed.so"
sgx_enclave_id_t global_eid = 0;

// This is a default key ID list copied from the SGX SDK examples
const uint8_t g_ecdsa_p256_att_key_id_list[] = {
    0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x8c, 0x4f,
    0x57, 0x75, 0xd7, 0x96, 0x50, 0x3e, 0x96, 0x13,
    0x7f, 0x77, 0xc6, 0x8a, 0x82, 0x9a, 0x00, 0x56,
    0xac, 0x8d, 0xed, 0x70, 0x14, 0x0b, 0x08, 0x1b,
    0x09, 0x44, 0x90, 0xc5, 0x7b, 0xff, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

void oPrintStatus(sgx_status_t code){
    std::cout << "Enclave returned status: " << code << std::endl;;
}

int main()
{
    sgx_status_t ret = SGX_SUCCESS;
    sgx_launch_token_t token = { 0 };
    int updated = 0;

    std::cout << "Loading enclave ...\n";
    ret = sgx_create_enclave(ENCLAVE_NAME, SGX_DEBUG_FLAG, &token, &updated, \
            &global_eid, NULL);

    if (!HandleSgxErr(ret)) return(1);

    std::cout << "\nAttempting to auto-select Attestation Key ID...\n";
    sgx_att_key_id_t key_id = {};
    ret = sgx_select_att_key_id( NULL, 0, &key_id);
    HandleSgxErr(ret);

    if (ret != SGX_SUCCESS){
        std::cerr << "Auto select failed... ";
        std::cout << "\nSelecting Attestation Key using example key ID list...\n";
        ret = sgx_select_att_key_id(
                g_ecdsa_p256_att_key_id_list,
                (uint32_t) sizeof(g_ecdsa_p256_att_key_id_list),
                &key_id);
        if (!HandleSgxErr(ret)) return(1);
    }

    std::cout << "Discovering pubkey ID size...\n";
    sgx_target_info_t target_info = {0};
    size_t key_size = 0;

    ret = sgx_init_quote_ex(&key_id, &target_info, &key_size, NULL);
    if (!HandleSgxErr(ret)) return(1);

    if (key_size <1) { std::cerr << "Bad Key Size\n"; return 1;}
    uint8_t *pubkey_id = new uint8_t[key_size];

    std::cout << "Initializing quote...\n";
    ret = sgx_init_quote_ex(&key_id, &target_info, &key_size, pubkey_id);
    if (!HandleSgxErr(ret)) return(1);

    std::cout << "Requesting report from enclave...\n";
    sgx_report_t report = {0};
    int retval = 0;
    ret =  ecall_Hello(global_eid, &retval, &target_info, &report);

    if (!HandleSgxErr(ret)) return(1);
    std::cout << "Enclave call returned without sgx error\n";

    if (!HandleSgxErr((sgx_status_t) retval)){
        std::cerr << "Report creation failed within enclave";
        return(1);
    }

    std::cout << "Getting quote size...\n";
    uint32_t quote_size = 0;
    ret = sgx_get_quote_size_ex(&key_id, &quote_size);
    if (!HandleSgxErr(ret)) return(1);

    std::cout << "Getting quote...\n";
    uint8_t *quote = new uint8_t[quote_size];
    ret = sgx_get_quote_ex(&report, &key_id, NULL, quote, quote_size);
    if (!HandleSgxErr(ret)) return(1);

    delete pubkey_id;
    delete quote;
    std::cout << "\nCOMPLETED\n\n";
    return(0);
}

